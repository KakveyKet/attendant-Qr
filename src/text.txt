<template>
  <div>
    <h2 class="text-lg text-indigo-700 font-semibold">Using QR code</h2>
    <div id="qr-code-full-region">
      <!-- <div v-if="showMessage" class="text-red-500 text-xl font-semibold">
        {{ messages }}
      </div> -->
      {{ scannedqrcode }}
    </div>
    <h3 class="text-lg text-indigo-700 font-semibold">
      Date: {{ currentDate }} - Time {{ currentTime }}
    </h3>
    <table>
      <tr>
        <th>id</th>
        <th>name</th>
        <th>time</th>
      </tr>
     
    </table>
  </div>
</template>
<script>
import { Html5Qrcode } from "html5-qrcode";
export default {
  data() {
    return {
      scannedqrcode: "",
      currentDate: "",
      currentTime: "",
      message: [],
      showMessage: false, // Changed from string to boolean
      // Changed from array to string
      messages: "",
    };
  },
  methods: {
    createscandqrcodes() {
      const html5Qrcodes = new Html5Qrcode("qr-code-full-region");
      const config = { fps: 10, qrbox: { width: 650, height: 650 } };
      html5Qrcodes.start(
        { facingMode: "environment" },
        config,
        this.onScanSuccess // Corrected method name
      );
    },

    onScanSuccess(decodeResult) {
      const obj = { decodeResult: decodeResult };
      if (
        this.message.find((item) => item.name == this.name(obj.decodeResult))
      ) {
        this.showMessage = true;
        this.messages = "Already Scanned"; // Corrected variable name
        setTimeout(() => {
          this.showMessage = false;
        }, 1500);
      } else {
        const currentTime = new Date().toLocaleTimeString(); // Corrected time format
        this.message.unshift({
          name: this.name(obj.decodeResult),
          id: this.id(obj.decodeResult),
          time: currentTime, // Corrected variable name
        });
        this.showMessage = true;
        this.messages = "Successfully scanned"; // Corrected variable name
      }
    },
    updateDate() {
      const now = new Date();
      const options = { year: "numeric", month: "long", day: "numeric" };
      this.currentDate = now.toLocaleDateString(undefined, options);
    },
    upDateTime() {
      const now = new Date();
      let hours = now.getHours();
      const minutes = now.getMinutes();
      const ampm = hours >= 12 ? "PM" : "AM";
      hours = hours % 12 || 12;
      const formattedHours = this.padZero(hours);
      this.currentTime = `${formattedHours}:${this.padZero(minutes)} ${ampm}`;
    },
    padZero(num) {
      return num < 10 ? "0" + num : num;
    },
    name(decodeResult) {
      const regex = / - ([^-]+) -/; // Corrected regex pattern
      const match = decodeResult.match(regex); // Corrected method name
      return match ? match[1].trim() : "";
    },
    id(decodeResult) {
      const regex = / - (\d+) /;
      const match = decodeResult.match(regex); // Corrected method name
      return match ? match[1].trim() : "";
    },
  },
  async mounted() {
    try {
      await this.createscandqrcodes(); // Ensure this function returns a promise
      this.upDateTime(); // No need for await if this function is synchronous
      this.updateDate(); // No need for await if this function is synchronous
    } catch (error) {
      console.error("Error in mounted:", error);
    }
  },
};
</script>
