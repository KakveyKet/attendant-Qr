<template>
  <div class="w-full h-[900px] mt-20 overflow-auto fixed">
    <div class="w-full h-auto">
      <h2 class="text-heading1 text-primary1 font-semibold p-2 ml-4">
        កត់់វត្តមាន
      </h2>
    </div>

    <div class="w-[760px] p-5 ml-12">
      <div class="w-full h-auto py-3 overflow-auto bg-primary3 rounded-2xl">
        <h3 class="text-lg text-indigo-700 font-semibold text-center">
          ថ្ងៃខែ: {{ currentDate }} - Time {{ currentTime }}
        </h3>
        <h1 class="text-heading3 text-center font-semibold">
          សូមប្រើប្រាស់ Qr code ដែលក្រុមការងារបានផ្ដល់ជូនមកស្កេន
        </h1>
      </div>
    </div>
    <div class="w-[500px] h-auto ml-10">
      <div class="rounded-lg ml-10" id="qr-code-full-region"></div>
    </div>
    <div class="w-[760px] ml-12 p-5">
      <button class="btnActtion" @click="reloadPage">ចុចបើក Camera</button>
    </div>
  </div>
  <Notivue v-slot="item">
    <Notification :item="item" />
  </Notivue>
</template>

<script>
import { push, Notivue, Notification } from "notivue";
import { Html5Qrcode } from "html5-qrcode";
import useCollection from "@/composible/useCollection";
import { timestamp } from "@/firebase/firebase";

export default {
  components: {
    Notivue,
    Notification,
  },
  data() {
    return {
      scannedqrcode: "",
      currentDate: "",
      currentTime: "",
      scannedRecords: [],
      qrCodeScanned: false,
      html5Qrcodes: null,
      config: { fps: 20, qrbox: { width: 250, height: 250 } },
      pinCode: "",
    };
  },
  methods: {
    createscandqrcodes() {
      const qrCodeElement = document.getElementById("qr-code-full-region");
      if (qrCodeElement) {
        this.html5Qrcodes = new Html5Qrcode("qr-code-full-region");
        this.html5Qrcodes.start(
          { facingMode: "environment" },
          this.config,
          this.onScanSuccess
        );
      } else {
        console.error("Element with id 'qr-code-full-region' not found");
      }
    },
    onScanSuccess(decodeResult) {
      const now = new Date();
      const scannedDate = `${now.getDate()}/${
        now.getMonth() + 1
      }/${now.getFullYear()}`;
      console.log("Scanned result:", decodeResult);
      console.log("Scanned date:", date);
      console.log("Expected date:", scannedDate);

     
      const { date } = JSON.parse(decodeResult);

      // Check if the scanned date matches today's date
      if (date !== scannedDate) {
        this.qrMessage = "Validation failed";
        console.log("Invalid date");
        return;
      }

      const { addDocs } = useCollection("attendants"); // Assuming "users" is your Firestore collection
      addDocs({
        name: name,
        date: date,
        createdAt: timestamp(),
      })
        .then(() => {
          console.log("User information successfully pushed to Firebase");
          push.success("User information successfully pushed to Firebase");
        })
        .catch((error) => {
          console.error("Error pushing user information to Firebase:", error);
          push.error("Error pushing user information to Firebase");
        });

      const hours = now.getHours();
      const minutes = now.getMinutes();
      const ampm = hours >= 12 ? "PM" : "AM";
      const formattedHours = this.padZero(hours);
      const currentTime = `${formattedHours}:${this.padZero(minutes)} ${ampm}`;

      this.scannedRecords.push({
        name: name,
        time: currentTime,
      });

      push.success("ស្កេនបានជោគជ័យ");

      this.html5Qrcodes.stop();
      setTimeout(() => {
        this.html5Qrcodes.start(
          { facingMode: "environment" },
          this.config,
          this.onScanSuccess
        );
      }, 2000);
    },

    updateDate() {
      const now = new Date();
      const options = { year: "numeric", month: "long", day: "numeric" };
      this.currentDate = now.toLocaleDateString(undefined, options);
    },
    updateTime() {
      const now = new Date();
      let hours = now.getHours();
      const minutes = now.getMinutes();
      const ampm = hours >= 12 ? "PM" : "AM";
      hours = hours % 12 || 12;
      const formattedHours = this.padZero(hours);
      this.currentTime = `${formattedHours}:${this.padZero(minutes)} ${ampm}`;
    },
    padZero(num) {
      return num < 10 ? "0" + num : num;
    },
    reloadPage() {
      window.location.reload();
    },
  },
  mounted() {
    this.updateTime();
    this.updateDate();
    this.$nextTick(() => {
      this.createscandqrcodes();
    });
  },
};
</script>
